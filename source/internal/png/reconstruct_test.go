package pngint

import (
	"github.com/Mihai22125/SteganoGo/pkg/png"
	. "gopkg.in/check.v1"
)

type MySuitePNGReconstruct struct {
	myPNG *PngImage
}

var _ = Suite(&MySuitePNGReconstruct{})

func (s *MySuitePNGReconstruct) SetUpSuite(c *C) {
	s.myPNG = new(PngImage)
}

func (s *MySuitePNGReconstruct) TestreconstructIDAT(c *C) {

	s.myPNG.meta.width = 32
	s.myPNG.meta.colorType = 0
	s.myPNG.meta.bitDepth = 1
	s.myPNG.data = []byte{0xff, 0xff, 0xff, 0xfe, 0xff, 0xff, 0xff, 0xfc, 0xff, 0xff, 0xff, 0xf8, 0xff, 0xff, 0xff, 0xf0, 0xf3, 0xf3, 0xff, 0xe0, 0xf3, 0xf3, 0xff, 0xc0, 0xf3, 0xf3, 0xff, 0x80, 0xf3, 0x33, 0xff, 0x0, 0xf3, 0x33, 0xfe, 0x0, 0xf3,
		0x33, 0xfc, 0x0, 0xf8, 0x7, 0xf8, 0x0, 0xf8, 0x7, 0xf0, 0x0, 0xfc, 0xcf, 0xe0, 0x0, 0xfc, 0xcf, 0xc0, 0x0, 0xff, 0xff, 0x80,
		0x0, 0xff, 0xff, 0x0, 0x0, 0xff, 0xfe, 0x0, 0x0, 0xff, 0xfc, 0x0, 0x0, 0xff, 0xf8, 0xf, 0xe0, 0xff, 0xf0, 0xf, 0xe0, 0xff, 0xe0, 0xc, 0x30, 0xff, 0xc0, 0xc, 0x30, 0xff, 0x80, 0xf, 0xe0, 0xff, 0x0, 0xf, 0xe0, 0xfe, 0x0, 0xc, 0x30, 0xfc, 0x0, 0xc, 0x30, 0xf8, 0x0, 0xf, 0xe0, 0xf0, 0x0, 0xf, 0xe0, 0xe0, 0x0, 0x0, 0x0, 0xc0, 0x0, 0x0, 0x0, 0x80, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0}

	expected := []byte{0x78, 0x9c, 0x24, 0xc0, 0xb1, 0x9, 0x4, 0x21, 0x10, 0x40, 0xd1, 0x9f, 0x6d, 0x22, 0xd8, 0x8a, 0xb0, 0xd, 0x5a, 0x9a, 0x1d, 0x6c, 0xb, 0x53, 0x82, 0x30, 0x89, 0xc1, 0xe0, 0xbf, 0xe0, 0x1e, 0xea, 0x55, 0x4b, 0x3d, 0xea, 0xce, 0x34, 0x32, 0x5d, 0x99, 0xce, 0x7c, 0x85, 0x7c, 0x2f, 0xf9, 0x16, 0xe7, 0x39, 0x9c, 0x67, 0x53, 0x5f, 0x50, 0xdf, 0x42, 0x27, 0xa, 0x78, 0xc1, 0x2, 0x4f, 0xf, 0x77, 0xf, 0xa3, 0xd, 0x57, 0x1b, 0xce, 0x1e, 0xd2, 0x83, 0x4b, 0x1b, 0x45, 0x1b, 0x87, 0x1e, 0x9b, 0x1e, 0x1, 0x2c, 0x60, 0xf2, 0xf7, 0xb, 0x0, 0x0, 0xff, 0xff, 0x2a, 0x11, 0x49, 0x2f}
	result, err := s.myPNG.reconstructIDAT()
	c.Assert(err, IsNil)
	c.Assert(result, DeepEquals, expected)
}

func (s *MySuitePNGReconstruct) TestDivideIDATChunks(c *C) {
	data := []byte{0x78, 0x9c, 0x24, 0xc0, 0xb1, 0x9, 0x4, 0x21, 0x10, 0x40, 0xd1, 0x9f, 0x6d, 0x22, 0xd8, 0x8a, 0xb0, 0xd, 0x5a, 0x9a, 0x1d, 0x6c, 0xb, 0x53, 0x82, 0x30, 0x89, 0xc1, 0xe0, 0xbf, 0xe0, 0x1e, 0xea, 0x55, 0x4b, 0x3d, 0xea, 0xce, 0x34, 0x32, 0x5d, 0x99, 0xce, 0x7c, 0x85, 0x7c, 0x2f, 0xf9, 0x16, 0xe7, 0x39, 0x9c, 0x67, 0x53, 0x5f, 0x50, 0xdf, 0x42, 0x27, 0xa, 0x78, 0xc1, 0x2, 0x4f, 0xf, 0x77, 0xf, 0xa3, 0xd, 0x57, 0x1b, 0xce, 0x1e, 0xd2, 0x83, 0x4b, 0x1b, 0x45, 0x1b, 0x87, 0x1e, 0x9b, 0x1e, 0x1, 0x2c, 0x60, 0xf2, 0xf7, 0xb, 0x0, 0x0, 0xff, 0xff, 0x2a, 0x11, 0x49, 0x2f}
	idatChunks := s.myPNG.divideIDATChunks(data)
	expectedIDATChunks := []png.Chunk{png.NewChunk(0x61, "IDAT", []uint8{0x78, 0x9c, 0x24, 0xc0, 0xb1, 0x9, 0x4, 0x21, 0x10, 0x40, 0xd1, 0x9f, 0x6d, 0x22, 0xd8, 0x8a, 0xb0, 0xd, 0x5a, 0x9a, 0x1d, 0x6c, 0xb, 0x53, 0x82, 0x30, 0x89, 0xc1, 0xe0, 0xbf, 0xe0, 0x1e, 0xea, 0x55, 0x4b, 0x3d, 0xea, 0xce, 0x34, 0x32, 0x5d, 0x99, 0xce, 0x7c, 0x85, 0x7c, 0x2f, 0xf9,
		0x16, 0xe7, 0x39, 0x9c, 0x67, 0x53, 0x5f, 0x50, 0xdf, 0x42, 0x27, 0xa, 0x78, 0xc1, 0x2, 0x4f, 0xf, 0x77, 0xf, 0xa3, 0xd, 0x57, 0x1b, 0xce, 0x1e, 0xd2, 0x83, 0x4b, 0x1b, 0x45, 0x1b, 0x87, 0x1e, 0x9b, 0x1e, 0x1, 0x2c, 0x60, 0xf2, 0xf7, 0xb, 0x0, 0x0, 0xff, 0xff, 0x2a, 0x11, 0x49, 0x2f}, 3414253921)}
	c.Assert(idatChunks, DeepEquals, expectedIDATChunks)
}
